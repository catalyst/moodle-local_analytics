<?php
// This file is part of Moodle - http://moodle.org/
//
// Moodle is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Moodle is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.

/**
 * analytics_table class.
 *
 * @package    local_analytics
 * @author     Dmitrii Metelkin <dmitriim@catalyst-au.net>
 * @copyright  2017 Catalyst IT
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */

namespace local_analytics\table;

use flexible_table;
use html_writer;
use moodle_url;
use local_analytics\settings\analytics_interface;


defined('MOODLE_INTERNAL') || die();

require_once($CFG->libdir.'/tablelib.php');

/**
 * analytics_table class.
 *
 * @package    local_analytics
 * @author     Dmitrii Metelkin <dmitriim@catalyst-au.net>
 * @copyright  2017 Catalyst IT
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class analytics_table extends flexible_table {
    /**
     * @var int Autogenerated id.
     */
    private static $autoid = 0;

    /**
     * Constructor
     *
     * @param string|null $id to be used by the table, autogenerated if null.
     */
    public function __construct($id = null) {
        global $PAGE;

        $id = (is_null($id) ? self::$autoid++ : $id);
        parent::__construct('auth_analytics_manage_'.$id);

        $this->define_baseurl($PAGE->url);
        $this->set_attribute('class', 'generaltable admintable');

        $this->define_columns(array(
                'type',
                'siteid',
                'enabled',
                'location',
                'url',
                'actions'
            )
        );

        $this->define_headers(array(
                get_string('type', 'local_analytics'),
                get_string('siteid', 'local_analytics'),
                get_string('enabled', 'local_analytics'),
                get_string('location', 'local_analytics'),
                get_string('siteurl', 'local_analytics'),
                get_string('actions'),
            )
        );

        $this->setup();
    }

    /**
     * Sets the data of the table.
     *
     * @param array $analyticslist[] $outages An array with outage objects.
     */
    public function show_data(array $analyticslist) {
        foreach ($analyticslist as $analytics) {
            $this->show_analytics($analytics);
        }
    }

    /**
     * Show one analytics item of the table.
     *
     * @param \local_analytics\settings\analytics_interface $analytics
     *
     * @throws \coding_exception
     */
    protected function show_analytics(analytics_interface $analytics) {

        if ($analytics->is_enabled()) {
            $class = '';
            $enabled = get_string('yes');
        } else {
            $class = 'dimmed_text';
            $enabled = get_string('no');
        }

        $this->add_data(array(
                get_string($analytics->get_property('type'), 'local_analytics'),
                $analytics->get_property('siteid'),
                $enabled,
                get_string($analytics->get_property('location'), 'local_analytics'),
                $analytics->get_property('siteurl'),
                $this->create_data_buttons($analytics, true),
            ), $class
        );
    }

    /**
     * Create the action buttons HTML code for a specific analytics.
     *
     * @param analytics_interface $analytics The analytics to generate the buttons.
     *
     * @return string The HTML code of the action buttons.
     */
    protected function create_data_buttons(analytics_interface $analytics) {
        global $OUTPUT;
        $buttons = '';

        // Enable/disable button.
        $action = 'show';
        $title = 'enable';

        if ($analytics->is_enabled()) {
            $action = 'hide';
            $title = 'disable';
        }

        $buttons .= html_writer::link(
            new moodle_url('/local/analytics/status.php', ['id' => $analytics->get_property('id')]),
            html_writer::empty_tag('img', [
                'src' => $OUTPUT->pix_url('t/' . $action),
                'alt' => get_string($title),
                'class' => 'iconsmall',
            ]),
            ['title' => get_string($title)]
        );

        // Edit button.
        $buttons .= html_writer::link(
            new moodle_url('/local/analytics/edit.php', ['edit' => $analytics->get_property('id')]),
            html_writer::empty_tag('img', [
                'src' => $OUTPUT->pix_url('t/edit'),
                'alt' => get_string('edit'),
                'class' => 'iconsmall',
            ]),
            ['title' => get_string('edit')]
        );

        // Delete button.
        $buttons .= html_writer::link(
            new moodle_url('/local/analytics/delete.php', ['id' => $analytics->get_property('id')]),
            html_writer::empty_tag('img', [
                'src' => $OUTPUT->pix_url('t/delete'),
                'alt' => get_string('delete'),
                'class' => 'iconsmall',
            ]),
            ['title' => get_string('delete')]
        );

        return html_writer::tag('nobr', $buttons);
    }
}
